/**
 * MarkdownNotes
 * Copyright (c) Kasra Faghihi, All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

import * as BrowserSync from 'browser-sync';

import Markdown from './markdown/markdown';
import FileSystem from 'fs';
import FileSystemExtra from 'fs-extra';
import { injectHtmlErrorOverlay, inlineHtml as inlineHtml } from './html_utils';


process.on('warning', e => console.warn(e.stack));

const path = process.argv[2];
if (path === undefined) {
    console.error('Missing work directory argument');
    process.exit(1);
}
const inputPath = path + '/input';
const outputPath = path + '/output';
const tempRenderPath = '.cache/render';

if (FileSystem.existsSync(path) === false) {
    FileSystem.mkdirSync(path);
    FileSystem.writeFileSync(path + '/README.md', 'Input markdown and resources under input path.\nOutput HTML generated under output path.\n\nGenerated by [MarkdownNotes](https://github.com/offbynull/markdown-notes).')
}

if (FileSystem.existsSync(inputPath) === false) {
    FileSystem.mkdirSync(inputPath);
    FileSystem.writeFileSync(inputPath + '/input.md', '# Fill me in')
}

if (FileSystem.existsSync(outputPath) === false) {
    FileSystem.mkdirSync(outputPath);
}

//
// Start the server
//
const bs = BrowserSync.create();
const inputWatcher = bs.watch(
    inputPath + '/**/*',
    {
        awaitWriteFinish: {
            stabilityThreshold: 100 // Wait until file size remains constant before converting md -> html
        }
    }
);

// Store the last SUCCESSFUL output -- if there was an error, this variable won't get overwritten (but the actual file output will)
let lastSuccessfulOutput = '<html><head></head><body></body></html>';

// Create a fake output if one does not exist, just so there's something initially to load when we start
if (FileSystem.existsSync(outputPath + '/output.html') === false) {
    FileSystem.writeFileSync(outputPath + '/output.html', lastSuccessfulOutput);
}

inputWatcher.on('change', () => {
    // Clean temp render path
    FileSystemExtra.removeSync(tempRenderPath);
    FileSystemExtra.ensureDirSync(tempRenderPath);
    FileSystemExtra.copySync(inputPath, tempRenderPath);

    // Render input.md to output.html
    const mdInput = FileSystem.readFileSync(tempRenderPath + '/input.md', { encoding: 'utf8'});
    const mdOutput = (() => {
        try {
            return new Markdown('', tempRenderPath).render(mdInput);
        } catch (err) {
            FileSystem.writeFileSync(
                outputPath + '/output.html',
                injectHtmlErrorOverlay(lastSuccessfulOutput, err.toString()),
                { encoding: 'utf8' }
            );
            bs.reload('output.html');
            return undefined;
        }
    })();
    if (mdOutput === undefined) {
        return;
    }
    
    // Inline rendered file
    try {
        inlineHtml(mdOutput, tempRenderPath,
            (inlineOutput) => {
                FileSystem.writeFileSync(
                    outputPath + '/output.html',
                    inlineOutput,
                    { encoding: 'utf8' }
                );
                bs.reload('output.html');                                  // ask the browser to reload
            }
        );
    } catch (err) {
        FileSystem.writeFileSync(
            outputPath + '/output.html',
            injectHtmlErrorOverlay(lastSuccessfulOutput, err.toString()),
            { encoding: 'utf8' }
        );
        bs.reload('output.html');
        return;
    }
});

bs.init({
    server: outputPath,
    watch: true,
    watchOptions: {
        awaitWriteFinish: {
            stabilityThreshold: 100 // Wait until file size remains constant before reloading browser
        }
    },
    startPath: 'output.html',
    // injectChanges: false,
    // ghostMode: false,
    reloadDelay: 0, // no point in artificially waiting before reloading?
    reloadOnRestart: true,
    // WORKAROUND FOR BUG -- https://github.com/BrowserSync/browser-sync/issues/1038
    // The embedded mathjax script has a <body> tag in it which triggers this bug. This same bug exists in competing tools (e.g.
    // live-server).
    snippetOptions: {
        rule: {
            match: /$/i,
            fn: (snippet, match) => snippet + match
        }
    }
});
inputWatcher.emit('change'); // Trigger fake change to replace the placeholder with real data and reload