/**
 * MarkdownNotes
 * Copyright (c) Kasra Faghihi, All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

import * as BrowserSync from 'browser-sync';

import FileSystem from 'fs';
import Process from 'process';
import ChildProcess from 'child_process';
import { injectHtmlErrorOverlay } from './utils/html_utils';
import { killProcessHierarchy } from './utils/process_utils';
import { Buffer } from 'buffer';


process.on('warning', e => console.warn(e.stack));

const path = (() => { 
    let path = process.argv[2];
    if (path === undefined) {
        console.error('Missing work directory argument');
        process.exit(1);
    }
    while (path.length > 1 && path.endsWith('/') === true) { // trim off trailing slashes because they screw up file watching
        path = path.slice(0, -1);
    }
    return path;
})();
const inputPath = path + '/input';
const outputPath = path + '/output';

if (FileSystem.existsSync(path) === false) {
    FileSystem.mkdirSync(path);
    FileSystem.writeFileSync(path + '/README.md', 'Input markdown and resources under input path.\nOutput HTML generated under output path.\n\nGenerated by [MarkdownNotes](https://github.com/offbynull/markdown-notes).')
}

if (FileSystem.existsSync(inputPath) === false) {
    FileSystem.mkdirSync(inputPath);
    FileSystem.writeFileSync(inputPath + '/input.md', '# Fill me in')
}

if (FileSystem.existsSync(outputPath) === false) {
    FileSystem.mkdirSync(outputPath);
}

//
// Start the server
//
const bs = BrowserSync.create();
const inputWatcher = bs.watch(
    inputPath + '/**/*',
    {
        awaitWriteFinish: {
            stabilityThreshold: 100 // Wait until file size remains constant before converting md -> html
        }
    }
);

// Store the last SUCCESSFUL output -- if there was an error, this variable won't get overwritten (but the actual file output will)
let lastSuccessfulOutput = '<html><head></head><body></body></html>';

// Create a fake output if one does not exist, just so there's something initially to load when we start
if (FileSystem.existsSync(outputPath + '/output.html') === false) {
    FileSystem.writeFileSync(outputPath + '/output.html', lastSuccessfulOutput);
}

let activeChildProc: undefined | ChildProcess.ChildProcess;

inputWatcher.on('change', () => {
    if (activeChildProc !== undefined) {
        console.log('Render process killed');
        activeChildProc.kill('SIGKILL');
        killProcessHierarchy('' + activeChildProc.pid);
    }

    console.log('Render process started');

    FileSystem.writeFileSync(
        outputPath + '/output.html',
        injectHtmlErrorOverlay(lastSuccessfulOutput, 'Rendering...', 'rgba(0,0,0,0.5)'),
        { encoding: 'utf8' }
    );

    activeChildProc = ChildProcess.fork('dist/render', [ inputPath ]);
    let stdoutBuffer = Buffer.alloc(0);
    if (activeChildProc.stdout !== null) {
        activeChildProc.stdout.on('data', (data) => { stdoutBuffer = Buffer.concat([stdoutBuffer, data]); });
    }
    let stderrBuffer = Buffer.alloc(0);
    if (activeChildProc.stderr !== null) {
        activeChildProc.stderr.on('data', (data) => { stderrBuffer = Buffer.concat([stderrBuffer, data]); });
    }
    activeChildProc.on('message', (m) => {
        activeChildProc = undefined;
        const type = m['type'] as string;
        switch (type) {
            case 'output': {
                lastSuccessfulOutput = m['data'];
                FileSystem.writeFileSync(
                    outputPath + '/output.html',
                    lastSuccessfulOutput,
                    { encoding: 'utf8' }
                );
                break;
            }
            case 'error': {
                const errorText = m['data'];
                FileSystem.writeFileSync(
                    outputPath + '/output.html',
                    injectHtmlErrorOverlay(lastSuccessfulOutput, errorText),
                    { encoding: 'utf8' }
                );
                break;
            }
            default:
                throw 'Bad type: ' + type;
        }
        console.log('Render process completed');
        bs.reload('output.html');
    });
});

bs.init({
    server: outputPath,
    watch: true,
    watchOptions: {
        awaitWriteFinish: {
            stabilityThreshold: 100 // Wait until file size remains constant before reloading browser
        }
    },
    startPath: 'output.html',
    // injectChanges: false,
    // ghostMode: false,
    reloadDelay: 0, // no point in artificially waiting before reloading?
    reloadOnRestart: true,
    // WORKAROUND FOR BUG -- https://github.com/BrowserSync/browser-sync/issues/1038
    // The embedded mathjax script has a <body> tag in it which triggers this bug. This same bug exists in competing tools (e.g.
    // live-server).
    snippetOptions: {
        rule: {
            match: /$/i,
            fn: (snippet, match) => snippet + match
        }
    }
});
inputWatcher.emit('change'); // Trigger fake change to replace the placeholder with real data and reload


//
// Kill all child processes on cleanup -- https://stackoverflow.com/a/49392671
//
['exit', 'SIGINT', 'SIGUSR1', 'SIGUSR2', 'uncaughtException', 'SIGTERM'].forEach(eventType => {
    Process.on(eventType as any, () => {
        console.log(`Performing cleanup (${eventType})...`);
        if (activeChildProc !== undefined) {
            activeChildProc.kill('SIGKILL');
            killProcessHierarchy('' + activeChildProc.pid);
        }
        Process.exit(1);
    });
});